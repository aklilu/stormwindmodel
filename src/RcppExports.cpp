// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/stormwindmodel.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// degrees_to_radians_Cpp
NumericVector degrees_to_radians_Cpp(NumericVector degrees);
static SEXP stormwindmodel_degrees_to_radians_Cpp_try(SEXP degreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type degrees(degreesSEXP);
    rcpp_result_gen = Rcpp::wrap(degrees_to_radians_Cpp(degrees));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP stormwindmodel_degrees_to_radians_Cpp(SEXP degreesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(stormwindmodel_degrees_to_radians_Cpp_try(degreesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// add_forward_speed_Cpp
NumericVector add_forward_speed_Cpp(NumericVector wind_sfc_sym, NumericVector tcspd_u, NumericVector tcspd_v, NumericVector swd, NumericVector cdist, NumericVector Rmax);
static SEXP stormwindmodel_add_forward_speed_Cpp_try(SEXP wind_sfc_symSEXP, SEXP tcspd_uSEXP, SEXP tcspd_vSEXP, SEXP swdSEXP, SEXP cdistSEXP, SEXP RmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type wind_sfc_sym(wind_sfc_symSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tcspd_u(tcspd_uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tcspd_v(tcspd_vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type swd(swdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cdist(cdistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Rmax(RmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(add_forward_speed_Cpp(wind_sfc_sym, tcspd_u, tcspd_v, swd, cdist, Rmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP stormwindmodel_add_forward_speed_Cpp(SEXP wind_sfc_symSEXP, SEXP tcspd_uSEXP, SEXP tcspd_vSEXP, SEXP swdSEXP, SEXP cdistSEXP, SEXP RmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(stormwindmodel_add_forward_speed_Cpp_try(wind_sfc_symSEXP, tcspd_uSEXP, tcspd_vSEXP, swdSEXP, cdistSEXP, RmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// add_inflow_Cpp
NumericVector add_inflow_Cpp(NumericVector gwd, NumericVector cdist, NumericVector Rmax);
static SEXP stormwindmodel_add_inflow_Cpp_try(SEXP gwdSEXP, SEXP cdistSEXP, SEXP RmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type gwd(gwdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cdist(cdistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Rmax(RmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(add_inflow_Cpp(gwd, cdist, Rmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP stormwindmodel_add_inflow_Cpp(SEXP gwdSEXP, SEXP cdistSEXP, SEXP RmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(stormwindmodel_add_inflow_Cpp_try(gwdSEXP, cdistSEXP, RmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// degrees_to_radians_Cpp1
NumericVector degrees_to_radians_Cpp1(NumericVector degrees);
static SEXP stormwindmodel_degrees_to_radians_Cpp1_try(SEXP degreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type degrees(degreesSEXP);
    rcpp_result_gen = Rcpp::wrap(degrees_to_radians_Cpp1(degrees));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP stormwindmodel_degrees_to_radians_Cpp1(SEXP degreesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(stormwindmodel_degrees_to_radians_Cpp1_try(degreesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// radians_to_degrees_Cpp1
NumericVector radians_to_degrees_Cpp1(NumericVector radians);
static SEXP stormwindmodel_radians_to_degrees_Cpp1_try(SEXP radiansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type radians(radiansSEXP);
    rcpp_result_gen = Rcpp::wrap(radians_to_degrees_Cpp1(radians));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP stormwindmodel_radians_to_degrees_Cpp1(SEXP radiansSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(stormwindmodel_radians_to_degrees_Cpp1_try(radiansSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// calc_bearing_Cpp
NumericVector calc_bearing_Cpp(NumericVector tclat_1, NumericVector tclon_1, NumericVector tclat_2, NumericVector tclon_2);
static SEXP stormwindmodel_calc_bearing_Cpp_try(SEXP tclat_1SEXP, SEXP tclon_1SEXP, SEXP tclat_2SEXP, SEXP tclon_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tclat_1(tclat_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tclon_1(tclon_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tclat_2(tclat_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tclon_2(tclon_2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_bearing_Cpp(tclat_1, tclon_1, tclat_2, tclon_2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP stormwindmodel_calc_bearing_Cpp(SEXP tclat_1SEXP, SEXP tclon_1SEXP, SEXP tclat_2SEXP, SEXP tclon_2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(stormwindmodel_calc_bearing_Cpp_try(tclat_1SEXP, tclon_1SEXP, tclat_2SEXP, tclon_2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gradient_to_surface_Cpp
double gradient_to_surface_Cpp(double wind_gl_aa, double cdist);
static SEXP stormwindmodel_gradient_to_surface_Cpp_try(SEXP wind_gl_aaSEXP, SEXP cdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type wind_gl_aa(wind_gl_aaSEXP);
    Rcpp::traits::input_parameter< double >::type cdist(cdistSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_to_surface_Cpp(wind_gl_aa, cdist));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP stormwindmodel_gradient_to_surface_Cpp(SEXP wind_gl_aaSEXP, SEXP cdistSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(stormwindmodel_gradient_to_surface_Cpp_try(wind_gl_aaSEXP, cdistSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// degrees_to_radians_Cpp2
NumericVector degrees_to_radians_Cpp2(NumericVector degrees);
static SEXP stormwindmodel_degrees_to_radians_Cpp2_try(SEXP degreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type degrees(degreesSEXP);
    rcpp_result_gen = Rcpp::wrap(degrees_to_radians_Cpp2(degrees));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP stormwindmodel_degrees_to_radians_Cpp2(SEXP degreesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(stormwindmodel_degrees_to_radians_Cpp2_try(degreesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// latlon_to_km_Cpp
NumericVector latlon_to_km_Cpp(NumericVector tclat_1, NumericVector tclon_1, NumericVector tclat_2, NumericVector tclon_2, NumericVector Rearth);
static SEXP stormwindmodel_latlon_to_km_Cpp_try(SEXP tclat_1SEXP, SEXP tclon_1SEXP, SEXP tclat_2SEXP, SEXP tclon_2SEXP, SEXP RearthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tclat_1(tclat_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tclon_1(tclon_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tclat_2(tclat_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tclon_2(tclon_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Rearth(RearthSEXP);
    rcpp_result_gen = Rcpp::wrap(latlon_to_km_Cpp(tclat_1, tclon_1, tclat_2, tclon_2, Rearth));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP stormwindmodel_latlon_to_km_Cpp(SEXP tclat_1SEXP, SEXP tclon_1SEXP, SEXP tclat_2SEXP, SEXP tclon_2SEXP, SEXP RearthSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(stormwindmodel_latlon_to_km_Cpp_try(tclat_1SEXP, tclon_1SEXP, tclat_2SEXP, tclon_2SEXP, RearthSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// will1_Cpp
double will1_Cpp(double cdist, double Rmax, double R1, double R2, double vmax_gl, double n, double A, double X1, double X2);
static SEXP stormwindmodel_will1_Cpp_try(SEXP cdistSEXP, SEXP RmaxSEXP, SEXP R1SEXP, SEXP R2SEXP, SEXP vmax_glSEXP, SEXP nSEXP, SEXP ASEXP, SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type cdist(cdistSEXP);
    Rcpp::traits::input_parameter< double >::type Rmax(RmaxSEXP);
    Rcpp::traits::input_parameter< double >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< double >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< double >::type vmax_gl(vmax_glSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< double >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(will1_Cpp(cdist, Rmax, R1, R2, vmax_gl, n, A, X1, X2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP stormwindmodel_will1_Cpp(SEXP cdistSEXP, SEXP RmaxSEXP, SEXP R1SEXP, SEXP R2SEXP, SEXP vmax_glSEXP, SEXP nSEXP, SEXP ASEXP, SEXP X1SEXP, SEXP X2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(stormwindmodel_will1_Cpp_try(cdistSEXP, RmaxSEXP, R1SEXP, R2SEXP, vmax_glSEXP, nSEXP, ASEXP, X1SEXP, X2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int stormwindmodel_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericVector(*degrees_to_radians_Cpp)(NumericVector)");
        signatures.insert("NumericVector(*add_forward_speed_Cpp)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*add_inflow_Cpp)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*degrees_to_radians_Cpp1)(NumericVector)");
        signatures.insert("NumericVector(*radians_to_degrees_Cpp1)(NumericVector)");
        signatures.insert("NumericVector(*calc_bearing_Cpp)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("double(*gradient_to_surface_Cpp)(double,double)");
        signatures.insert("NumericVector(*degrees_to_radians_Cpp2)(NumericVector)");
        signatures.insert("NumericVector(*latlon_to_km_Cpp)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("double(*will1_Cpp)(double,double,double,double,double,double,double,double,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP stormwindmodel_RcppExport_registerCCallable() { 
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_degrees_to_radians_Cpp", (DL_FUNC)stormwindmodel_degrees_to_radians_Cpp_try);
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_add_forward_speed_Cpp", (DL_FUNC)stormwindmodel_add_forward_speed_Cpp_try);
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_add_inflow_Cpp", (DL_FUNC)stormwindmodel_add_inflow_Cpp_try);
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_degrees_to_radians_Cpp1", (DL_FUNC)stormwindmodel_degrees_to_radians_Cpp1_try);
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_radians_to_degrees_Cpp1", (DL_FUNC)stormwindmodel_radians_to_degrees_Cpp1_try);
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_calc_bearing_Cpp", (DL_FUNC)stormwindmodel_calc_bearing_Cpp_try);
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_gradient_to_surface_Cpp", (DL_FUNC)stormwindmodel_gradient_to_surface_Cpp_try);
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_degrees_to_radians_Cpp2", (DL_FUNC)stormwindmodel_degrees_to_radians_Cpp2_try);
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_latlon_to_km_Cpp", (DL_FUNC)stormwindmodel_latlon_to_km_Cpp_try);
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_will1_Cpp", (DL_FUNC)stormwindmodel_will1_Cpp_try);
    R_RegisterCCallable("stormwindmodel", "stormwindmodel_RcppExport_validate", (DL_FUNC)stormwindmodel_RcppExport_validate);
    return R_NilValue;
}
