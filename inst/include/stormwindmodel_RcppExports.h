// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_stormwindmodel_RCPPEXPORTS_H_GEN_
#define RCPP_stormwindmodel_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace stormwindmodel {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("stormwindmodel", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("stormwindmodel", "_stormwindmodel_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in stormwindmodel");
            }
        }
    }

    inline NumericVector add_forward_speed_Cpp(NumericVector wind_sfc_sym, NumericVector tcspd_u, NumericVector tcspd_v, NumericVector swd, NumericVector cdist, NumericVector Rmax) {
        typedef SEXP(*Ptr_add_forward_speed_Cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_add_forward_speed_Cpp p_add_forward_speed_Cpp = NULL;
        if (p_add_forward_speed_Cpp == NULL) {
            validateSignature("NumericVector(*add_forward_speed_Cpp)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_add_forward_speed_Cpp = (Ptr_add_forward_speed_Cpp)R_GetCCallable("stormwindmodel", "_stormwindmodel_add_forward_speed_Cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_add_forward_speed_Cpp(Shield<SEXP>(Rcpp::wrap(wind_sfc_sym)), Shield<SEXP>(Rcpp::wrap(tcspd_u)), Shield<SEXP>(Rcpp::wrap(tcspd_v)), Shield<SEXP>(Rcpp::wrap(swd)), Shield<SEXP>(Rcpp::wrap(cdist)), Shield<SEXP>(Rcpp::wrap(Rmax)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector add_inflow_Cpp(NumericVector gwd, NumericVector cdist, NumericVector Rmax) {
        typedef SEXP(*Ptr_add_inflow_Cpp)(SEXP,SEXP,SEXP);
        static Ptr_add_inflow_Cpp p_add_inflow_Cpp = NULL;
        if (p_add_inflow_Cpp == NULL) {
            validateSignature("NumericVector(*add_inflow_Cpp)(NumericVector,NumericVector,NumericVector)");
            p_add_inflow_Cpp = (Ptr_add_inflow_Cpp)R_GetCCallable("stormwindmodel", "_stormwindmodel_add_inflow_Cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_add_inflow_Cpp(Shield<SEXP>(Rcpp::wrap(gwd)), Shield<SEXP>(Rcpp::wrap(cdist)), Shield<SEXP>(Rcpp::wrap(Rmax)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector radians_to_degrees_Cpp1(NumericVector radians) {
        typedef SEXP(*Ptr_radians_to_degrees_Cpp1)(SEXP);
        static Ptr_radians_to_degrees_Cpp1 p_radians_to_degrees_Cpp1 = NULL;
        if (p_radians_to_degrees_Cpp1 == NULL) {
            validateSignature("NumericVector(*radians_to_degrees_Cpp1)(NumericVector)");
            p_radians_to_degrees_Cpp1 = (Ptr_radians_to_degrees_Cpp1)R_GetCCallable("stormwindmodel", "_stormwindmodel_radians_to_degrees_Cpp1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_radians_to_degrees_Cpp1(Shield<SEXP>(Rcpp::wrap(radians)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector calc_bearing_Cpp(NumericVector tclat_1, NumericVector tclon_1, NumericVector tclat_2, NumericVector tclon_2) {
        typedef SEXP(*Ptr_calc_bearing_Cpp)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_calc_bearing_Cpp p_calc_bearing_Cpp = NULL;
        if (p_calc_bearing_Cpp == NULL) {
            validateSignature("NumericVector(*calc_bearing_Cpp)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_calc_bearing_Cpp = (Ptr_calc_bearing_Cpp)R_GetCCallable("stormwindmodel", "_stormwindmodel_calc_bearing_Cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_calc_bearing_Cpp(Shield<SEXP>(Rcpp::wrap(tclat_1)), Shield<SEXP>(Rcpp::wrap(tclon_1)), Shield<SEXP>(Rcpp::wrap(tclat_2)), Shield<SEXP>(Rcpp::wrap(tclon_2)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector degrees_to_radians_Cpp(Rcpp::NumericVector degrees) {
        typedef SEXP(*Ptr_degrees_to_radians_Cpp)(SEXP);
        static Ptr_degrees_to_radians_Cpp p_degrees_to_radians_Cpp = NULL;
        if (p_degrees_to_radians_Cpp == NULL) {
            validateSignature("Rcpp::NumericVector(*degrees_to_radians_Cpp)(Rcpp::NumericVector)");
            p_degrees_to_radians_Cpp = (Ptr_degrees_to_radians_Cpp)R_GetCCallable("stormwindmodel", "_stormwindmodel_degrees_to_radians_Cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_degrees_to_radians_Cpp(Shield<SEXP>(Rcpp::wrap(degrees)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline double gradient_to_surface_Cpp(double wind_gl_aa, double cdist) {
        typedef SEXP(*Ptr_gradient_to_surface_Cpp)(SEXP,SEXP);
        static Ptr_gradient_to_surface_Cpp p_gradient_to_surface_Cpp = NULL;
        if (p_gradient_to_surface_Cpp == NULL) {
            validateSignature("double(*gradient_to_surface_Cpp)(double,double)");
            p_gradient_to_surface_Cpp = (Ptr_gradient_to_surface_Cpp)R_GetCCallable("stormwindmodel", "_stormwindmodel_gradient_to_surface_Cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gradient_to_surface_Cpp(Shield<SEXP>(Rcpp::wrap(wind_gl_aa)), Shield<SEXP>(Rcpp::wrap(cdist)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector latlon_to_km_Cpp(Rcpp::NumericVector tclat_1, Rcpp::NumericVector tclon_1, Rcpp::NumericVector tclat_2, Rcpp::NumericVector tclon_2, Rcpp::NumericVector Rearth = 6378.14) {
        typedef SEXP(*Ptr_latlon_to_km_Cpp)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_latlon_to_km_Cpp p_latlon_to_km_Cpp = NULL;
        if (p_latlon_to_km_Cpp == NULL) {
            validateSignature("Rcpp::NumericVector(*latlon_to_km_Cpp)(Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_latlon_to_km_Cpp = (Ptr_latlon_to_km_Cpp)R_GetCCallable("stormwindmodel", "_stormwindmodel_latlon_to_km_Cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_latlon_to_km_Cpp(Shield<SEXP>(Rcpp::wrap(tclat_1)), Shield<SEXP>(Rcpp::wrap(tclon_1)), Shield<SEXP>(Rcpp::wrap(tclat_2)), Shield<SEXP>(Rcpp::wrap(tclon_2)), Shield<SEXP>(Rcpp::wrap(Rearth)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline double will1_Cpp(double cdist, double Rmax, double R1, double R2, double vmax_gl, double n, double A, double X1, double X2 = 25) {
        typedef SEXP(*Ptr_will1_Cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_will1_Cpp p_will1_Cpp = NULL;
        if (p_will1_Cpp == NULL) {
            validateSignature("double(*will1_Cpp)(double,double,double,double,double,double,double,double,double)");
            p_will1_Cpp = (Ptr_will1_Cpp)R_GetCCallable("stormwindmodel", "_stormwindmodel_will1_Cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_will1_Cpp(Shield<SEXP>(Rcpp::wrap(cdist)), Shield<SEXP>(Rcpp::wrap(Rmax)), Shield<SEXP>(Rcpp::wrap(R1)), Shield<SEXP>(Rcpp::wrap(R2)), Shield<SEXP>(Rcpp::wrap(vmax_gl)), Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(X1)), Shield<SEXP>(Rcpp::wrap(X2)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_stormwindmodel_RCPPEXPORTS_H_GEN_
